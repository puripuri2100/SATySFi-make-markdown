@require: list
@require: option



module StdJaMarkdown : sig

  val document : 'a -> block-text -> string
    constraint 'a :: (|
      title : inline-text;
      author : inline-text;
      style-sheet : string;
    |)


%  direct \ref : [string] inline-cmd
%  direct \figure : [string?; inline-text; block-text] inline-cmd
  direct +section : [string?; inline-text; block-text] block-cmd
  direct +subsection : [string?; inline-text; block-text] block-cmd
  direct +p : [inline-text] block-cmd
  direct +pn : [inline-text] block-cmd


end = struct

let concat = List.fold-left (^) ` `


let generate-fresh-label =
  let-mutable count <- 0 in
    (fun () -> (
      let () = count <- !count + 1 in
        `generated:` ^ (arabic (!count))
    ))


let-inline tinfo \ref key =
  let opt = get-cross-reference (key ^ `:num`) in
  let it =
    match opt with
    | None -> {?}
    | Some(s) -> embed-string s
  in
    stringify-inline tinfo it


%let-mutable ref-figure <- 0
%
%let-inline tinfo \figure ?:labelopt caption inner =
%  let label =
%    match labelopt with
%    | None -> generate-fresh-label ()
%    | Some(s) -> s
%  in
%  let () = ref-figure <- !ref-figure + 1 in
%  let s-inner tinfo =
%    stringify-block tinfo inner
%  in
%  let s-num = arabic !ref-figure in
%  let () = register-cross-reference (label ^ `:num`) s-num in
%  let
%    s-caption tinfo = HTMLBase.tag ?* ?:(false) tinfo `figcaption` (fun tinfo ->
%      `å›³` ^ s-num ^ #` `# ^ stringify-inline tinfo caption
%    )
%  in
%  let main tinfo =
%    concat [
%      s-inner tinfo;
%      s-caption tinfo;
%    ]
%  in
%    HTMLBase.tag tinfo `figure` (fun tinfo -> main tinfo)


let document record inner =
  let tinfo = get-initial-text-info () in

  let title = record#title in
  let author = record#author in
  let style-sheet = record#style-sheet in

  let s-main = stringify-block tinfo inner in


  let main =
    concat [
      s-main;
    ]
  in
    main


let-mutable num-section <- 0
let-mutable num-subsection <- 0


let section-scheme tinfo label title inner =
  let () = num-section <- !num-section + 1 in
  let () = num-subsection <- 0 in
  let s-num = arabic (!num-section) in
  let () = register-cross-reference (label ^ `:num`) s-num in
  let s-title =
    `# `# ^ stringify-inline tinfo title
  in
  let s-inner = stringify-block tinfo inner in
  let main = s-title ^ (break tinfo) ^ s-inner in
    (break tinfo) ^ main


let subsection-scheme tinfo label title inner =
  let () = num-subsection <- !num-subsection + 1 in
  let s-num = arabic (!num-section) ^ `.` ^ arabic (!num-subsection) in
  let () = register-cross-reference (label ^ `:num`) s-num in
  let s-title =
    `# `# ^ stringify-inline tinfo title
  in
  let s-inner = stringify-block tinfo inner in
  let main = s-title ^ (break tinfo) ^ s-inner in
    (break tinfo) ^ main


let-block tinfo +section ?:labelopt title inner =
  let label =
    match labelopt with
    | None -> generate-fresh-label ()
    | Some(s) -> s
  in
    section-scheme tinfo label title inner


let-block tinfo +subsection ?:labelopt title inner =
  let label =
    match labelopt with
    | None -> generate-fresh-label ()
    | Some(s) -> s
  in
    subsection-scheme tinfo label title inner



let-block tinfo +p it = stringify-inline tinfo it ^ (break tinfo)

let-block tinfo +pn it = stringify-inline tinfo it ^ (break tinfo)

end

let document = StdJaMarkdown.document
