@require: list

module MarkdownCode : sig

  direct +code : [string] block-cmd
  direct +console : [string] block-cmd
  direct \code : [string] inline-cmd
  direct \console : [string] inline-cmd
  direct \d-code : [string] inline-cmd

end = struct


let-rec string-skip s n =
  if n <= 0 then
    ` `
  else
    s ^ (string-skip s (n - 1))


let scheme-block tinfo code =
  let break-code = ` ` in
  let lstraw = split-into-lines code in
  let lst =
    match lstraw with
    | []        -> lstraw
    | x :: []   -> lstraw
    | _ :: tail -> tail
  in
  let code-lst = List.append lst [(0, ```` ``` ````)] |> List.append [(0, ```` ``` ````)] in
  let s-code =
      code-lst |> List.fold-left-adjacent (fun sacc (i, s-sub) _ optnext -> (
        let s-last =
          match optnext with
          | Some(_) -> ` ` ^ break-code ^ (break tinfo)
          | None    -> ` `
        in
        let s =
          s-sub ^ s-last
        in
          sacc ^ s
      )) ` `
    in
    s-code


let scheme-inline tinfo code = `` ` `` ^ code ^ `` ` ``


let-block tinfo +code code = scheme-block tinfo code ^ (break tinfo)


let-block tinfo +console code = scheme-block tinfo code ^ (break tinfo)


let-inline tinfo \code code = scheme-inline tinfo code


let-inline tinfo \console code = (break tinfo) ^ scheme-block tinfo code ^ (break tinfo)


let-inline tinfo \d-code code = scheme-block tinfo code ^ (break tinfo)


end
